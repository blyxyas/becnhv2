use std::{
    env::current_dir,
    fs::{self, create_dir},
    io::{stdin, Write},
    path::Path,
    thread,
};

use anyhow::{bail, Result};
use git2::Repository;
use log::debug;

use crate::{CLIPPY_PATH, RUSTC_PERF_PATH, RUST_TREE_PATH, SETUP_COMPLETED_LOCK};

pub(crate) fn setup(yes: bool) -> Result<()> {
    debug!(
        "Asking user if we should clone Rust and Clippy into dir {:#?}",
        current_dir()
    );

    let current_dir = current_dir()?;
    if !yes {
        println!("This will clone Clippy and Rust's repositories in this directory ({}), are you sure? [Y/n]", current_dir.to_string_lossy());

        let mut s = String::new();
        stdin().read_line(&mut s)?;
        if s.trim().to_uppercase() != "Y" {
            bail!("Aborting setup");
        };
    }

    debug!("User has responded with Y, proceeding");
    println!("Cloning repos...");

    let clippy_handle = thread::spawn(|| {
        if !Path::new(CLIPPY_PATH).exists() {
            Repository::clone(
                "https://github.com/rust-lang/rust-clippy",
                Path::new(CLIPPY_PATH),
            )
            .expect("Couldn't clone Clippy, check if the path is already there");
        };
        println!("Clippy cloned");
    });
    let rust_handle = thread::spawn(|| {
        if !Path::new(RUST_TREE_PATH).exists() {
            Repository::clone(
                "https://github.com/rust-lang/rust",
                Path::new(RUST_TREE_PATH),
            )
            .expect("Couldn't clone Rust, check if the path is already there");
        }
        println!("Rust (tree) cloned");
    });

    let perf_handle = thread::spawn(|| {
        if !Path::new(RUSTC_PERF_PATH).exists() {
            Repository::clone(
                "https://github.com/rust-lang/rustc-perf",
                Path::new(RUSTC_PERF_PATH),
            )
            .expect("Couldn't clone Rust, check if the path is already there");
        }
    });

    perf_handle.join().unwrap();
    clippy_handle.join().unwrap();
    rust_handle.join().unwrap();

    println!("Rustc-perf cloned");

    create_dir("archive")?;

    // Create `.setup-completed__`
    let mut setup_flag = fs::File::create_new(SETUP_COMPLETED_LOCK)?;
    setup_flag.write_all(
        b"This file was AUTOGENERATED by `becnhv2 setup`, make sure to not remove it,
or you'll have to reinstall the whole tool",
    )?;

    println!("Everything setup");

    Ok(())
}
