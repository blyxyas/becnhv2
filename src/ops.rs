use std::{
    env::current_dir,
    fs,
    io::{stdin, Write},
    path::Path,
};

use anyhow::{anyhow, bail, Context, Result};
use git2::{self, build::RepoBuilder, FetchOptions, Repository};

use crate::{CLIPPY_PATH, RUST_TREE_PATH, SETUP_COMPLETED_LOCK};

use log::debug;

pub(crate) fn setup(yes: bool) -> Result<()> {
    debug!(
        "Asking user if we should clone Rust and Clippy into dir {:#?}",
        current_dir()
    );

    let current_dir = current_dir()?;
    if !yes {
        println!("This will clone Clippy and Rust's repositories in this directory ({}), are you sure? [Y/n]", current_dir.to_string_lossy());

        let mut s = String::new();
        stdin().read_line(&mut s)?;
        if s.trim().to_uppercase() != "Y" {
            bail!("Aborting setup");
        };
    }

    debug!("User has responded with Y, proceeding");

    Repository::clone(
        "https://github.com/rust-lang/rust-clippy",
        Path::new(CLIPPY_PATH),
    )?;
    Repository::clone(
        "https://github.com/rust-lang/rust-clippy",
        Path::new(RUST_TREE_PATH),
    )?;

    // Create `.setup-completed__`
    let mut setup_flag = fs::File::create_new(SETUP_COMPLETED_LOCK)?;
    setup_flag.write_all(
        b"This file was AUTOGENERATED by `becnhv2 setup`, make sure to not remove it,
or you'll have to reinstall the whole tool",
    )?;

    Ok(())
}

fn get_pr(number: usize, branch: String) -> Result<()> {
    Ok(())
}
